{-# STDLIB_VERSION 4 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let btfcAssetID = base58'AKemFVxKesFJeecAGqy1ujUK8YFa2hqewtucxAit7Z8c'
func getPrice() = {
  match getInteger(this, "WavesPerBtfc") {
    case a: Int => a
    case _ => 200
  }
}
func acceptBtfc(sum: Int, e: AttachedPayment) = {
  if(e.assetId != btfcAssetID) then throw("WAVES<->BTFC Swap accepts only WAVES")
  else sum + e.amount
}
func acceptWaves(sum: Int, e: AttachedPayment) = {
  if(isDefined(e.assetId)) then throw("BTFC<->WAVES Swap accepts only BTFC")
  else sum + e.amount
}
@Callable(i)
func setPrice(price: Int) = {
  if(Address(i.caller.bytes) != this) then throw("Non-administrators cannot set price")
  else [IntegerEntry("WavesPerBtfc", price)]
}
@Callable(i)
func FromBtfcToWaves() = {
  let sum = FOLD<2>(i.payments, 0, acceptBtfc)
  [ScriptTransfer(Address(i.caller.bytes), sum * getPrice() / 100, Unit())]
}
@Callable(i)
func FromWavesToBtfc() = {
  let sum = FOLD<2>(i.payments, 0, acceptWaves)
  [ScriptTransfer(Address(i.caller.bytes), sum * 100 / getPrice(), btfcAssetID)]
}